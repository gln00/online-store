name: CI/CD workflow
on: 
  # workflow запустится если будет пуш в main ветку
  push:
    branches:
      - main

  # workflow запустится если будет публикация релиза
  release:
    types:
      - published

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      # Клонирование репозитория на раннер
      - name: Cloning repository
        uses: actions/checkout@v4

      # Сборка докер образа
      - name: Build docker image
        run: |
          apt install pip
          docker build -t usvp/online-store:${{ github.sha }} .

      # Запуск докер образа и проверка его работы
      - name: Start docker image and check health
        run: | 
          docker run --name online-store-container -d -p 8080:8080 usvp/online-store:${{ github.sha }}
          sleep 5 
          curl localhost:8080

      # Проверка статуса контейнера
      - name: Check container status 
        run: docker ps --filter "name=online-store-container" --format "{{.Status}}"

      # Остановка контейнера
      - name: Stop container 
        run: docker stop online-store-container

      # Для того, чтобы реализовать cd мне нужно докер образ прокинуть на сервер где будет деплой
      # для этого можно в ci реализовать push docker image в DockerHub и после при подключении 
      # по ssh в cd спуллить этот образ и запустить его
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Загрзука Docker image на DockerHub
      - name: Push docker image 
        run: docker image push usvp/online-store:${{ github.sha }}

  cd:
    runs-on: ubuntu-latest

    # needs нужен для того, чтобы связать джобы, т.е.
    # джоба cd начнет выполнение в том случае, если джоба ci завершится без ошибок(джоба cd зависит от ci)
    needs: ci 

    steps:

      # Подлключение к серверу по ssh
      - name: Connect to my server with ssh 
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SSH_HOST}} # Ip сервера 
          username: ${{ secrets.SSH_USERNAME }} # Имя сервера
          password: ${{ secrets.SSH_KEY }} # Приватный ключ ssh

      # Скачиваем образ 
      - name: Pull docker image 
        run: docker pull usvp/online-store:${{ github.sha }}

      # Запускаем образ и проверяем работу
      - name: Run docker image 
        run: |
          docker run --name online-store-container -d -p 8080:8080 usvp/online-store:${{ github.sha }}
          sleep 5
          curl localhost:8080

      # Останавливаем докер контейнер
      - name: Stop docker image 
        run: | 
          docker stop online-store-container
          docker rm online-store 
